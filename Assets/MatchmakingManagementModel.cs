using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class MatchmakingManagementModel
{
        [RealtimeProperty(1, true, true)]
        private int _tropicalQue;

        [RealtimeProperty(2, true, true)]
        private int _glacierQue;

        [RealtimeProperty(3, true, true)]
        private int _sunsetQue;

        [RealtimeProperty(4, true, true)]
        private string _newRoomName;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class MatchmakingManagementModel : RealtimeModel {
    public int tropicalQue {
        get {
            return _cache.LookForValueInCache(_tropicalQue, entry => entry.tropicalQueSet, entry => entry.tropicalQue);
        }
        set {
            if (this.tropicalQue == value) return;
            _cache.UpdateLocalCache(entry => { entry.tropicalQueSet = true; entry.tropicalQue = value; return entry; });
            InvalidateReliableLength();
            FireTropicalQueDidChange(value);
        }
    }
    
    public int glacierQue {
        get {
            return _cache.LookForValueInCache(_glacierQue, entry => entry.glacierQueSet, entry => entry.glacierQue);
        }
        set {
            if (this.glacierQue == value) return;
            _cache.UpdateLocalCache(entry => { entry.glacierQueSet = true; entry.glacierQue = value; return entry; });
            InvalidateReliableLength();
            FireGlacierQueDidChange(value);
        }
    }
    
    public int sunsetQue {
        get {
            return _cache.LookForValueInCache(_sunsetQue, entry => entry.sunsetQueSet, entry => entry.sunsetQue);
        }
        set {
            if (this.sunsetQue == value) return;
            _cache.UpdateLocalCache(entry => { entry.sunsetQueSet = true; entry.sunsetQue = value; return entry; });
            InvalidateReliableLength();
            FireSunsetQueDidChange(value);
        }
    }
    
    public string newRoomName {
        get {
            return _cache.LookForValueInCache(_newRoomName, entry => entry.newRoomNameSet, entry => entry.newRoomName);
        }
        set {
            if (this.newRoomName == value) return;
            _cache.UpdateLocalCache(entry => { entry.newRoomNameSet = true; entry.newRoomName = value; return entry; });
            InvalidateReliableLength();
            FireNewRoomNameDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(MatchmakingManagementModel model, T value);
    public event PropertyChangedHandler<int> tropicalQueDidChange;
    public event PropertyChangedHandler<int> glacierQueDidChange;
    public event PropertyChangedHandler<int> sunsetQueDidChange;
    public event PropertyChangedHandler<string> newRoomNameDidChange;
    
    private struct LocalCacheEntry {
        public bool tropicalQueSet;
        public int tropicalQue;
        public bool glacierQueSet;
        public int glacierQue;
        public bool sunsetQueSet;
        public int sunsetQue;
        public bool newRoomNameSet;
        public string newRoomName;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        TropicalQue = 1,
        GlacierQue = 2,
        SunsetQue = 3,
        NewRoomName = 4,
    }
    
    public MatchmakingManagementModel() : this(null) {
    }
    
    public MatchmakingManagementModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireTropicalQueDidChange(int value) {
        try {
            tropicalQueDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireGlacierQueDidChange(int value) {
        try {
            glacierQueDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireSunsetQueDidChange(int value) {
        try {
            sunsetQueDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireNewRoomNameDidChange(string value) {
        try {
            newRoomNameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.TropicalQue, (uint)_tropicalQue);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.GlacierQue, (uint)_glacierQue);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.SunsetQue, (uint)_sunsetQue);
            length += WriteStream.WriteStringLength((uint)PropertyID.NewRoomName, _newRoomName);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.tropicalQueSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.TropicalQue, (uint)entry.tropicalQue);
            }
            if (entry.glacierQueSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.GlacierQue, (uint)entry.glacierQue);
            }
            if (entry.sunsetQueSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.SunsetQue, (uint)entry.sunsetQue);
            }
            if (entry.newRoomNameSet) {
                length += WriteStream.WriteStringLength((uint)PropertyID.NewRoomName, entry.newRoomName);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.TropicalQue, (uint)_tropicalQue);
            stream.WriteVarint32((uint)PropertyID.GlacierQue, (uint)_glacierQue);
            stream.WriteVarint32((uint)PropertyID.SunsetQue, (uint)_sunsetQue);
            stream.WriteString((uint)PropertyID.NewRoomName, _newRoomName);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.tropicalQueSet || entry.glacierQueSet || entry.sunsetQueSet || entry.newRoomNameSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.tropicalQueSet) {
                stream.WriteVarint32((uint)PropertyID.TropicalQue, (uint)entry.tropicalQue);
                didWriteProperties = true;
            }
            if (entry.glacierQueSet) {
                stream.WriteVarint32((uint)PropertyID.GlacierQue, (uint)entry.glacierQue);
                didWriteProperties = true;
            }
            if (entry.sunsetQueSet) {
                stream.WriteVarint32((uint)PropertyID.SunsetQue, (uint)entry.sunsetQue);
                didWriteProperties = true;
            }
            if (entry.newRoomNameSet) {
                stream.WriteString((uint)PropertyID.NewRoomName, entry.newRoomName);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.TropicalQue: {
                    int previousValue = _tropicalQue;
                    _tropicalQue = (int)stream.ReadVarint32();
                    bool tropicalQueExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.tropicalQueSet);
                    if (!tropicalQueExistsInChangeCache && _tropicalQue != previousValue) {
                        FireTropicalQueDidChange(_tropicalQue);
                    }
                    break;
                }
                case (uint)PropertyID.GlacierQue: {
                    int previousValue = _glacierQue;
                    _glacierQue = (int)stream.ReadVarint32();
                    bool glacierQueExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.glacierQueSet);
                    if (!glacierQueExistsInChangeCache && _glacierQue != previousValue) {
                        FireGlacierQueDidChange(_glacierQue);
                    }
                    break;
                }
                case (uint)PropertyID.SunsetQue: {
                    int previousValue = _sunsetQue;
                    _sunsetQue = (int)stream.ReadVarint32();
                    bool sunsetQueExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.sunsetQueSet);
                    if (!sunsetQueExistsInChangeCache && _sunsetQue != previousValue) {
                        FireSunsetQueDidChange(_sunsetQue);
                    }
                    break;
                }
                case (uint)PropertyID.NewRoomName: {
                    string previousValue = _newRoomName;
                    _newRoomName = stream.ReadString();
                    bool newRoomNameExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.newRoomNameSet);
                    if (!newRoomNameExistsInChangeCache && _newRoomName != previousValue) {
                        FireNewRoomNameDidChange(_newRoomName);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _tropicalQue = tropicalQue;
        _glacierQue = glacierQue;
        _sunsetQue = sunsetQue;
        _newRoomName = newRoomName;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
