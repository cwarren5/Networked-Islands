using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class GameManagementModel
{
    [RealtimeProperty(1, true, true)]
    private int _playerTurn;

    [RealtimeProperty(2, true, true)]
    private int _turnState;

    [RealtimeProperty(3, true, true)]
    private int _gameState;

    [RealtimeProperty(4, true, true)]
    private int _totalTurns;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class GameManagementModel : RealtimeModel {
    public int playerTurn {
        get {
            return _cache.LookForValueInCache(_playerTurn, entry => entry.playerTurnSet, entry => entry.playerTurn);
        }
        set {
            if (this.playerTurn == value) return;
            _cache.UpdateLocalCache(entry => { entry.playerTurnSet = true; entry.playerTurn = value; return entry; });
            InvalidateReliableLength();
            FirePlayerTurnDidChange(value);
        }
    }
    
    public int turnState {
        get {
            return _cache.LookForValueInCache(_turnState, entry => entry.turnStateSet, entry => entry.turnState);
        }
        set {
            if (this.turnState == value) return;
            _cache.UpdateLocalCache(entry => { entry.turnStateSet = true; entry.turnState = value; return entry; });
            InvalidateReliableLength();
            FireTurnStateDidChange(value);
        }
    }
    
    public int gameState {
        get {
            return _cache.LookForValueInCache(_gameState, entry => entry.gameStateSet, entry => entry.gameState);
        }
        set {
            if (this.gameState == value) return;
            _cache.UpdateLocalCache(entry => { entry.gameStateSet = true; entry.gameState = value; return entry; });
            InvalidateReliableLength();
            FireGameStateDidChange(value);
        }
    }
    
    public int totalTurns {
        get {
            return _cache.LookForValueInCache(_totalTurns, entry => entry.totalTurnsSet, entry => entry.totalTurns);
        }
        set {
            if (this.totalTurns == value) return;
            _cache.UpdateLocalCache(entry => { entry.totalTurnsSet = true; entry.totalTurns = value; return entry; });
            InvalidateReliableLength();
            FireTotalTurnsDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(GameManagementModel model, T value);
    public event PropertyChangedHandler<int> playerTurnDidChange;
    public event PropertyChangedHandler<int> turnStateDidChange;
    public event PropertyChangedHandler<int> gameStateDidChange;
    public event PropertyChangedHandler<int> totalTurnsDidChange;
    
    private struct LocalCacheEntry {
        public bool playerTurnSet;
        public int playerTurn;
        public bool turnStateSet;
        public int turnState;
        public bool gameStateSet;
        public int gameState;
        public bool totalTurnsSet;
        public int totalTurns;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        PlayerTurn = 1,
        TurnState = 2,
        GameState = 3,
        TotalTurns = 4,
    }
    
    public GameManagementModel() : this(null) {
    }
    
    public GameManagementModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FirePlayerTurnDidChange(int value) {
        try {
            playerTurnDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTurnStateDidChange(int value) {
        try {
            turnStateDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireGameStateDidChange(int value) {
        try {
            gameStateDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTotalTurnsDidChange(int value) {
        try {
            totalTurnsDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.PlayerTurn, (uint)_playerTurn);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.TurnState, (uint)_turnState);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.GameState, (uint)_gameState);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.TotalTurns, (uint)_totalTurns);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.playerTurnSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.PlayerTurn, (uint)entry.playerTurn);
            }
            if (entry.turnStateSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.TurnState, (uint)entry.turnState);
            }
            if (entry.gameStateSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.GameState, (uint)entry.gameState);
            }
            if (entry.totalTurnsSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.TotalTurns, (uint)entry.totalTurns);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.PlayerTurn, (uint)_playerTurn);
            stream.WriteVarint32((uint)PropertyID.TurnState, (uint)_turnState);
            stream.WriteVarint32((uint)PropertyID.GameState, (uint)_gameState);
            stream.WriteVarint32((uint)PropertyID.TotalTurns, (uint)_totalTurns);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.playerTurnSet || entry.turnStateSet || entry.gameStateSet || entry.totalTurnsSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.playerTurnSet) {
                stream.WriteVarint32((uint)PropertyID.PlayerTurn, (uint)entry.playerTurn);
                didWriteProperties = true;
            }
            if (entry.turnStateSet) {
                stream.WriteVarint32((uint)PropertyID.TurnState, (uint)entry.turnState);
                didWriteProperties = true;
            }
            if (entry.gameStateSet) {
                stream.WriteVarint32((uint)PropertyID.GameState, (uint)entry.gameState);
                didWriteProperties = true;
            }
            if (entry.totalTurnsSet) {
                stream.WriteVarint32((uint)PropertyID.TotalTurns, (uint)entry.totalTurns);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.PlayerTurn: {
                    int previousValue = _playerTurn;
                    _playerTurn = (int)stream.ReadVarint32();
                    bool playerTurnExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.playerTurnSet);
                    if (!playerTurnExistsInChangeCache && _playerTurn != previousValue) {
                        FirePlayerTurnDidChange(_playerTurn);
                    }
                    break;
                }
                case (uint)PropertyID.TurnState: {
                    int previousValue = _turnState;
                    _turnState = (int)stream.ReadVarint32();
                    bool turnStateExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.turnStateSet);
                    if (!turnStateExistsInChangeCache && _turnState != previousValue) {
                        FireTurnStateDidChange(_turnState);
                    }
                    break;
                }
                case (uint)PropertyID.GameState: {
                    int previousValue = _gameState;
                    _gameState = (int)stream.ReadVarint32();
                    bool gameStateExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.gameStateSet);
                    if (!gameStateExistsInChangeCache && _gameState != previousValue) {
                        FireGameStateDidChange(_gameState);
                    }
                    break;
                }
                case (uint)PropertyID.TotalTurns: {
                    int previousValue = _totalTurns;
                    _totalTurns = (int)stream.ReadVarint32();
                    bool totalTurnsExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.totalTurnsSet);
                    if (!totalTurnsExistsInChangeCache && _totalTurns != previousValue) {
                        FireTotalTurnsDidChange(_totalTurns);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _playerTurn = playerTurn;
        _turnState = turnState;
        _gameState = gameState;
        _totalTurns = totalTurns;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
